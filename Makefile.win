#!make

# Ensure the xml2rfc cache directory exists locally
IGNORE := $(shell md $(USERPROFILE)\.cache\xml2rfc)

SRC := $(shell yq r metanorma.yml metanorma.source.files | cut -c 3-999)
ifeq ($(SRC),ll)
BUILT := $(shell yq r metanorma.yml metanorma.source.built_targets | cut -d ":" -f 1 | tr -s "\\n" " ")
ifeq ($(BUILT),ll)
SRC := $(filter-out README.adoc, $(wildcard sources/*.adoc))
else
XML := $(patsubst sources/%,documents/%,$(BUILT))
endif
endif

FORMATS := $(shell yq r metanorma.yml metanorma.formats | tr -d '[:space:]' | tr -s "-" " ")
ifeq ($(FORMATS),null)
FORMAT_MARKER := mn-output-
FORMATS := $(shell grep "$(FORMAT_MARKER)" $(SRC) | cut -f 2 -d " " | tr "," "\\n" | sort | uniq | tr "\\n" " ")
endif

XML  ?= $(patsubst sources/%,documents/%,$(patsubst %.adoc,%.xml,$(SRC)))

METANORMA_DOCKER_IMAGE ?= metanorma/metanorma

ifdef METANORMA_DOCKER
  PREFIX_CMD := echo "Running via docker..." & docker run -v "$$(pwd)":/metanorma/ $(METANORMA_DOCKER_IMAGE)
else
  PREFIX_CMD := echo "Running locally..." & bundle exec
endif

_OUT_FILES := $(foreach FORMAT,$(FORMATS),$(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))
OUT_FILES  := $(foreach F,$(_OUT_FILES),$($F))


all: documents.html

documents:
	mkdir $@

documents/%.xml: documents sources/%.xml
	mv sources/$(addsuffix .*,$*) documents

# Build canonical XML output
# If XML file is provided, copy it over
# Otherwise, build it using adoc
sources/%.xml: | bundle
	$(eval BUILT_TARGET := $(subst /,\\,$(shell yq r metanorma.yml metanorma.source.built_targets[$@])))
	if NOT "$(BUILT_TARGET)" == "null" ( \
		if exist "$(BUILT_TARGET)" ( \
			if "$(suffix $(BUILT_TARGET))" == ".xml" ( \
				cp "$(BUILT_TARGET)" $@ \
			) else ( \
				$(PREFIX_CMD) metanorma $(BUILT_TARGET) & \
				cp "$(subst adoc,xml,${BUILT_TARGET})" $@ \
			) \
		) else ( \
			$(PREFIX_CMD) metanorma $(BUILT_TARGET) & \
			cp "$(subst adoc,xml,${BUILT_TARGET})" $@ \
		) \
	)

# Build derivative output
sources/%.html sources/%.doc sources/%.pdf:	sources/%.xml
	$(PREFIX_CMD) metanorma $< \

documents.rxl: $(XML)
	bundle exec relaton concatenate \
	  -t "$(shell yq r metanorma.yml relaton.collection.name)" \
		-g "$(shell yq r metanorma.yml relaton.collection.organization)" \
		documents $@

documents.html: documents.rxl
	$(PREFIX_CMD) relaton xml2html documents.rxl

%.adoc:

define FORMAT_TASKS
OUT_FILES-$(FORMAT) := $($(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))

open-$(FORMAT):
	open $$(OUT_FILES-$(FORMAT))

clean-$(FORMAT):
	rm -f $$(OUT_FILES-$(FORMAT))

$(FORMAT): clean-$(FORMAT) $$(OUT_FILES-$(FORMAT))

.PHONY: clean-$(FORMAT)

endef

$(foreach FORMAT,$(FORMATS),$(eval $(FORMAT_TASKS)))

open: open-html

clean:
	rm -rf documents documents.html documents.rxl published $(OUT_FILES)
	del /q *_images

bundle:
	IF "" == "%METANORMA_DOCKER%" bundle

.PHONY: bundle all open clean

#
# Watch-related jobs
#

.PHONY: watch serve watch-serve

NODE_BINS          := onchange live-serve run-p
NODE_BIN_DIR       := node_modules/.bin
NODE_PACKAGE_PATHS := $(foreach PACKAGE_NAME,$(NODE_BINS),$(NODE_BIN_DIR)/$(PACKAGE_NAME))

$(NODE_PACKAGE_PATHS): package.json
	npm i

watch: $(NODE_BIN_DIR)/onchange
	make all
	$< $(ALL_SRC) -- make all

define WATCH_TASKS
watch-$(FORMAT): $(NODE_BIN_DIR)/onchange
	make $(FORMAT)
	$$< $$(SRC_$(FORMAT)) -- make $(FORMAT)

.PHONY: watch-$(FORMAT)
endef

$(foreach FORMAT,$(FORMATS),$(eval $(WATCH_TASKS)))

serve: $(NODE_BIN_DIR)/live-server revealjs-css reveal.js sources/images
	set PORT=$${PORT:-8123} & \
	set port=$${PORT} & \
	for /r %%html in $(HTML) do ( \
		$< --entry-file=%%html --port=%port% --ignore="*.html,*.xml,Makefile,Gemfile.*,package.*.json" --wait=1000 & \
		set /A port=%port%+1 \
	)

watch-serve: $(NODE_BIN_DIR)/run-p
	$< watch serve

#
# Deploy jobs
#

publish: published

published: documents.html
	mkdir -p $@ && \
	cp -a documents $@/ && \
	cp $< $@/index.html;